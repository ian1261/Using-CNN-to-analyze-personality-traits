{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "op0khm6ApxVO",
        "outputId": "e520ee47-0358-4754-a7b2-03b8958134f3"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " reshape (Reshape)           (None, 6000, 1)           0         \n",
            "                                                                 \n",
            " conv1d (Conv1D)             (None, 2997, 16)          144       \n",
            "                                                                 \n",
            " conv1d_1 (Conv1D)           (None, 1499, 16)          2064      \n",
            "                                                                 \n",
            " max_pooling1d (MaxPooling1D  (None, 749, 16)          0         \n",
            " )                                                               \n",
            "                                                                 \n",
            " conv1d_2 (Conv1D)           (None, 375, 64)           4160      \n",
            "                                                                 \n",
            " conv1d_3 (Conv1D)           (None, 188, 64)           16448     \n",
            "                                                                 \n",
            " max_pooling1d_1 (MaxPooling  (None, 94, 64)           0         \n",
            " 1D)                                                             \n",
            "                                                                 \n",
            " conv1d_4 (Conv1D)           (None, 47, 256)           65792     \n",
            "                                                                 \n",
            " conv1d_5 (Conv1D)           (None, 24, 256)           262400    \n",
            "                                                                 \n",
            " max_pooling1d_2 (MaxPooling  (None, 12, 256)          0         \n",
            " 1D)                                                             \n",
            "                                                                 \n",
            " conv1d_6 (Conv1D)           (None, 12, 512)           262656    \n",
            "                                                                 \n",
            " conv1d_7 (Conv1D)           (None, 12, 512)           524800    \n",
            "                                                                 \n",
            " max_pooling1d_3 (MaxPooling  (None, 6, 512)           0         \n",
            " 1D)                                                             \n",
            "                                                                 \n",
            " global_average_pooling1d (G  (None, 512)              0         \n",
            " lobalAveragePooling1D)                                          \n",
            "                                                                 \n",
            " dropout (Dropout)           (None, 512)               0         \n",
            "                                                                 \n",
            " dense (Dense)               (None, 10)                5130      \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 1,143,594\n",
            "Trainable params: 1,143,594\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n",
            "None\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:119: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 640 train items.\n",
            "list 1 is 7.0\n",
            "Epoch 1/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 2.0959 - accuracy: 0.1828Found 152 test items.\n",
            "list 1 is 5.0\n",
            "\n",
            "Epoch 1: val_loss improved from inf to 2.01786, saving model to best_model.01-2.0179.h5\n",
            "32/32 [==============================] - 7s 187ms/step - loss: 2.0959 - accuracy: 0.1828 - val_loss: 2.0179 - val_accuracy: 0.1571\n",
            "Epoch 2/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 1.7985 - accuracy: 0.4406\n",
            "Epoch 2: val_loss improved from 2.01786 to 1.66172, saving model to best_model.02-1.6617.h5\n",
            "32/32 [==============================] - 4s 136ms/step - loss: 1.7985 - accuracy: 0.4406 - val_loss: 1.6617 - val_accuracy: 0.5071\n",
            "Epoch 3/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 1.3210 - accuracy: 0.5375\n",
            "Epoch 3: val_loss improved from 1.66172 to 1.12704, saving model to best_model.03-1.1270.h5\n",
            "32/32 [==============================] - 4s 136ms/step - loss: 1.3210 - accuracy: 0.5375 - val_loss: 1.1270 - val_accuracy: 0.5214\n",
            "Epoch 4/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 0.9174 - accuracy: 0.5875\n",
            "Epoch 4: val_loss improved from 1.12704 to 0.86146, saving model to best_model.04-0.8615.h5\n",
            "32/32 [==============================] - 4s 133ms/step - loss: 0.9174 - accuracy: 0.5875 - val_loss: 0.8615 - val_accuracy: 0.5643\n",
            "Epoch 5/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 0.6515 - accuracy: 0.6922\n",
            "Epoch 5: val_loss improved from 0.86146 to 0.63062, saving model to best_model.05-0.6306.h5\n",
            "32/32 [==============================] - 4s 136ms/step - loss: 0.6515 - accuracy: 0.6922 - val_loss: 0.6306 - val_accuracy: 0.6429\n",
            "Epoch 6/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 0.5463 - accuracy: 0.7703\n",
            "Epoch 6: val_loss improved from 0.63062 to 0.45558, saving model to best_model.06-0.4556.h5\n",
            "32/32 [==============================] - 4s 134ms/step - loss: 0.5463 - accuracy: 0.7703 - val_loss: 0.4556 - val_accuracy: 0.8357\n",
            "Epoch 7/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 0.3869 - accuracy: 0.8547\n",
            "Epoch 7: val_loss improved from 0.45558 to 0.22173, saving model to best_model.07-0.2217.h5\n",
            "32/32 [==============================] - 4s 138ms/step - loss: 0.3869 - accuracy: 0.8547 - val_loss: 0.2217 - val_accuracy: 0.9571\n",
            "Epoch 8/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 0.2406 - accuracy: 0.9203\n",
            "Epoch 8: val_loss improved from 0.22173 to 0.14137, saving model to best_model.08-0.1414.h5\n",
            "32/32 [==============================] - 4s 133ms/step - loss: 0.2406 - accuracy: 0.9203 - val_loss: 0.1414 - val_accuracy: 0.9714\n",
            "Epoch 9/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 0.1799 - accuracy: 0.9438\n",
            "Epoch 9: val_loss did not improve from 0.14137\n",
            "32/32 [==============================] - 4s 132ms/step - loss: 0.1799 - accuracy: 0.9438 - val_loss: 0.2867 - val_accuracy: 0.8786\n",
            "Epoch 10/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 0.2147 - accuracy: 0.9234\n",
            "Epoch 10: val_loss improved from 0.14137 to 0.09824, saving model to best_model.10-0.0982.h5\n",
            "32/32 [==============================] - 4s 133ms/step - loss: 0.2147 - accuracy: 0.9234 - val_loss: 0.0982 - val_accuracy: 0.9857\n",
            "Epoch 11/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 0.1055 - accuracy: 0.9672\n",
            "Epoch 11: val_loss did not improve from 0.09824\n",
            "32/32 [==============================] - 4s 134ms/step - loss: 0.1055 - accuracy: 0.9672 - val_loss: 0.1137 - val_accuracy: 0.9643\n",
            "Epoch 12/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 0.1735 - accuracy: 0.9297\n",
            "Epoch 12: val_loss improved from 0.09824 to 0.05878, saving model to best_model.12-0.0588.h5\n",
            "32/32 [==============================] - 4s 134ms/step - loss: 0.1735 - accuracy: 0.9297 - val_loss: 0.0588 - val_accuracy: 1.0000\n",
            "Epoch 13/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 0.1086 - accuracy: 0.9688\n",
            "Epoch 13: val_loss improved from 0.05878 to 0.05653, saving model to best_model.13-0.0565.h5\n",
            "32/32 [==============================] - 4s 133ms/step - loss: 0.1086 - accuracy: 0.9688 - val_loss: 0.0565 - val_accuracy: 1.0000\n",
            "Epoch 14/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 0.0816 - accuracy: 0.9797\n",
            "Epoch 14: val_loss improved from 0.05653 to 0.03528, saving model to best_model.14-0.0353.h5\n",
            "32/32 [==============================] - 4s 134ms/step - loss: 0.0816 - accuracy: 0.9797 - val_loss: 0.0353 - val_accuracy: 1.0000\n",
            "Epoch 15/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 0.0608 - accuracy: 0.9797\n",
            "Epoch 15: val_loss improved from 0.03528 to 0.02979, saving model to best_model.15-0.0298.h5\n",
            "32/32 [==============================] - 4s 137ms/step - loss: 0.0608 - accuracy: 0.9797 - val_loss: 0.0298 - val_accuracy: 0.9929\n",
            "Epoch 16/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 0.0661 - accuracy: 0.9781\n",
            "Epoch 16: val_loss did not improve from 0.02979\n",
            "32/32 [==============================] - 4s 131ms/step - loss: 0.0661 - accuracy: 0.9781 - val_loss: 0.0402 - val_accuracy: 0.9929\n",
            "Epoch 17/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 0.0643 - accuracy: 0.9812\n",
            "Epoch 17: val_loss improved from 0.02979 to 0.02408, saving model to best_model.17-0.0241.h5\n",
            "32/32 [==============================] - 4s 134ms/step - loss: 0.0643 - accuracy: 0.9812 - val_loss: 0.0241 - val_accuracy: 1.0000\n",
            "Epoch 18/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 0.0484 - accuracy: 0.9859\n",
            "Epoch 18: val_loss improved from 0.02408 to 0.01980, saving model to best_model.18-0.0198.h5\n",
            "32/32 [==============================] - 4s 134ms/step - loss: 0.0484 - accuracy: 0.9859 - val_loss: 0.0198 - val_accuracy: 1.0000\n",
            "Epoch 19/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 0.0425 - accuracy: 0.9922\n",
            "Epoch 19: val_loss did not improve from 0.01980\n",
            "32/32 [==============================] - 4s 130ms/step - loss: 0.0425 - accuracy: 0.9922 - val_loss: 0.0511 - val_accuracy: 0.9786\n",
            "Epoch 20/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 0.0483 - accuracy: 0.9812\n",
            "Epoch 20: val_loss did not improve from 0.01980\n",
            "32/32 [==============================] - 4s 134ms/step - loss: 0.0483 - accuracy: 0.9812 - val_loss: 0.0760 - val_accuracy: 0.9857\n",
            "Epoch 21/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 0.1700 - accuracy: 0.9422\n",
            "Epoch 21: val_loss did not improve from 0.01980\n",
            "32/32 [==============================] - 4s 133ms/step - loss: 0.1700 - accuracy: 0.9422 - val_loss: 0.0309 - val_accuracy: 1.0000\n",
            "Epoch 22/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 0.0513 - accuracy: 0.9875\n",
            "Epoch 22: val_loss improved from 0.01980 to 0.01500, saving model to best_model.22-0.0150.h5\n",
            "32/32 [==============================] - 4s 135ms/step - loss: 0.0513 - accuracy: 0.9875 - val_loss: 0.0150 - val_accuracy: 1.0000\n",
            "Epoch 23/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 0.0195 - accuracy: 0.9953\n",
            "Epoch 23: val_loss improved from 0.01500 to 0.01064, saving model to best_model.23-0.0106.h5\n",
            "32/32 [==============================] - 4s 134ms/step - loss: 0.0195 - accuracy: 0.9953 - val_loss: 0.0106 - val_accuracy: 1.0000\n",
            "Epoch 24/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 0.0175 - accuracy: 0.9969\n",
            "Epoch 24: val_loss improved from 0.01064 to 0.00683, saving model to best_model.24-0.0068.h5\n",
            "32/32 [==============================] - 4s 134ms/step - loss: 0.0175 - accuracy: 0.9969 - val_loss: 0.0068 - val_accuracy: 1.0000\n",
            "Epoch 25/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 0.0203 - accuracy: 0.9969\n",
            "Epoch 25: val_loss improved from 0.00683 to 0.00673, saving model to best_model.25-0.0067.h5\n",
            "32/32 [==============================] - 4s 136ms/step - loss: 0.0203 - accuracy: 0.9969 - val_loss: 0.0067 - val_accuracy: 1.0000\n",
            "Epoch 26/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 0.0418 - accuracy: 0.9859\n",
            "Epoch 26: val_loss did not improve from 0.00673\n",
            "32/32 [==============================] - 4s 132ms/step - loss: 0.0418 - accuracy: 0.9859 - val_loss: 0.0074 - val_accuracy: 1.0000\n",
            "Epoch 27/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 0.0142 - accuracy: 0.9969\n",
            "Epoch 27: val_loss improved from 0.00673 to 0.00671, saving model to best_model.27-0.0067.h5\n",
            "32/32 [==============================] - 4s 133ms/step - loss: 0.0142 - accuracy: 0.9969 - val_loss: 0.0067 - val_accuracy: 1.0000\n",
            "Epoch 28/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 0.0169 - accuracy: 0.9969\n",
            "Epoch 28: val_loss did not improve from 0.00671\n",
            "32/32 [==============================] - 4s 131ms/step - loss: 0.0169 - accuracy: 0.9969 - val_loss: 0.0124 - val_accuracy: 1.0000\n",
            "Epoch 29/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 0.0073 - accuracy: 1.0000\n",
            "Epoch 29: val_loss improved from 0.00671 to 0.00571, saving model to best_model.29-0.0057.h5\n",
            "32/32 [==============================] - 4s 133ms/step - loss: 0.0073 - accuracy: 1.0000 - val_loss: 0.0057 - val_accuracy: 1.0000\n",
            "Epoch 30/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 0.0126 - accuracy: 0.9969\n",
            "Epoch 30: val_loss did not improve from 0.00571\n",
            "32/32 [==============================] - 4s 134ms/step - loss: 0.0126 - accuracy: 0.9969 - val_loss: 0.0062 - val_accuracy: 1.0000\n",
            "Epoch 31/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 0.0167 - accuracy: 0.9953\n",
            "Epoch 31: val_loss did not improve from 0.00571\n",
            "32/32 [==============================] - 4s 133ms/step - loss: 0.0167 - accuracy: 0.9953 - val_loss: 0.0076 - val_accuracy: 1.0000\n",
            "Epoch 32/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 0.0332 - accuracy: 0.9875\n",
            "Epoch 32: val_loss improved from 0.00571 to 0.00445, saving model to best_model.32-0.0045.h5\n",
            "32/32 [==============================] - 4s 133ms/step - loss: 0.0332 - accuracy: 0.9875 - val_loss: 0.0045 - val_accuracy: 1.0000\n",
            "Epoch 33/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 0.0261 - accuracy: 0.9937\n",
            "Epoch 33: val_loss did not improve from 0.00445\n",
            "32/32 [==============================] - 4s 132ms/step - loss: 0.0261 - accuracy: 0.9937 - val_loss: 0.0066 - val_accuracy: 1.0000\n",
            "Epoch 34/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 0.0100 - accuracy: 0.9969\n",
            "Epoch 34: val_loss did not improve from 0.00445\n",
            "32/32 [==============================] - 4s 130ms/step - loss: 0.0100 - accuracy: 0.9969 - val_loss: 0.0055 - val_accuracy: 1.0000\n",
            "Epoch 35/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 0.0063 - accuracy: 0.9984\n",
            "Epoch 35: val_loss did not improve from 0.00445\n",
            "32/32 [==============================] - 4s 135ms/step - loss: 0.0063 - accuracy: 0.9984 - val_loss: 0.0088 - val_accuracy: 1.0000\n",
            "Epoch 36/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 0.0056 - accuracy: 1.0000\n",
            "Epoch 36: val_loss improved from 0.00445 to 0.00274, saving model to best_model.36-0.0027.h5\n",
            "32/32 [==============================] - 4s 132ms/step - loss: 0.0056 - accuracy: 1.0000 - val_loss: 0.0027 - val_accuracy: 1.0000\n",
            "Epoch 37/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 0.0040 - accuracy: 1.0000\n",
            "Epoch 37: val_loss did not improve from 0.00274\n",
            "32/32 [==============================] - 4s 132ms/step - loss: 0.0040 - accuracy: 1.0000 - val_loss: 0.0029 - val_accuracy: 1.0000\n",
            "Epoch 38/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 0.0077 - accuracy: 0.9984\n",
            "Epoch 38: val_loss did not improve from 0.00274\n",
            "32/32 [==============================] - 4s 132ms/step - loss: 0.0077 - accuracy: 0.9984 - val_loss: 0.0085 - val_accuracy: 1.0000\n",
            "Epoch 39/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 0.0077 - accuracy: 0.9984\n",
            "Epoch 39: val_loss did not improve from 0.00274\n",
            "32/32 [==============================] - 4s 132ms/step - loss: 0.0077 - accuracy: 0.9984 - val_loss: 0.0058 - val_accuracy: 1.0000\n",
            "Epoch 40/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 0.0038 - accuracy: 0.9984\n",
            "Epoch 40: val_loss did not improve from 0.00274\n",
            "32/32 [==============================] - 4s 132ms/step - loss: 0.0038 - accuracy: 0.9984 - val_loss: 0.0030 - val_accuracy: 1.0000\n",
            "Epoch 41/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 0.0459 - accuracy: 0.9844\n",
            "Epoch 41: val_loss did not improve from 0.00274\n",
            "32/32 [==============================] - 4s 132ms/step - loss: 0.0459 - accuracy: 0.9844 - val_loss: 0.4267 - val_accuracy: 0.9071\n",
            "Epoch 42/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 0.1766 - accuracy: 0.9359\n",
            "Epoch 42: val_loss did not improve from 0.00274\n",
            "32/32 [==============================] - 4s 134ms/step - loss: 0.1766 - accuracy: 0.9359 - val_loss: 0.0504 - val_accuracy: 0.9786\n",
            "Epoch 43/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 0.0328 - accuracy: 0.9922\n",
            "Epoch 43: val_loss did not improve from 0.00274\n",
            "32/32 [==============================] - 4s 131ms/step - loss: 0.0328 - accuracy: 0.9922 - val_loss: 0.0085 - val_accuracy: 1.0000\n",
            "Epoch 44/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 0.0125 - accuracy: 0.9984\n",
            "Epoch 44: val_loss did not improve from 0.00274\n",
            "32/32 [==============================] - 4s 133ms/step - loss: 0.0125 - accuracy: 0.9984 - val_loss: 0.0078 - val_accuracy: 1.0000\n",
            "Epoch 45/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 0.0089 - accuracy: 0.9984\n",
            "Epoch 45: val_loss did not improve from 0.00274\n",
            "32/32 [==============================] - 4s 133ms/step - loss: 0.0089 - accuracy: 0.9984 - val_loss: 0.0039 - val_accuracy: 1.0000\n",
            "Epoch 46/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 0.0673 - accuracy: 0.9812\n",
            "Epoch 46: val_loss did not improve from 0.00274\n",
            "32/32 [==============================] - 4s 133ms/step - loss: 0.0673 - accuracy: 0.9812 - val_loss: 0.0379 - val_accuracy: 1.0000\n",
            "Epoch 47/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 0.0303 - accuracy: 0.9875\n",
            "Epoch 47: val_loss did not improve from 0.00274\n",
            "32/32 [==============================] - 4s 133ms/step - loss: 0.0303 - accuracy: 0.9875 - val_loss: 0.0134 - val_accuracy: 0.9929\n",
            "Epoch 48/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 0.0148 - accuracy: 0.9984\n",
            "Epoch 48: val_loss did not improve from 0.00274\n",
            "32/32 [==============================] - 4s 133ms/step - loss: 0.0148 - accuracy: 0.9984 - val_loss: 0.0047 - val_accuracy: 1.0000\n",
            "Epoch 49/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 0.0059 - accuracy: 1.0000\n",
            "Epoch 49: val_loss did not improve from 0.00274\n",
            "32/32 [==============================] - 6s 179ms/step - loss: 0.0059 - accuracy: 1.0000 - val_loss: 0.0033 - val_accuracy: 1.0000\n",
            "Epoch 50/50\n",
            "32/32 [==============================] - ETA: 0s - loss: 0.0031 - accuracy: 1.0000\n",
            "Epoch 50: val_loss did not improve from 0.00274\n",
            "32/32 [==============================] - 4s 135ms/step - loss: 0.0031 - accuracy: 1.0000 - val_loss: 0.0033 - val_accuracy: 1.0000\n"
          ]
        }
      ],
      "source": [
        "\n",
        "import keras\n",
        "from scipy.io import loadmat\n",
        "import matplotlib.pyplot as plt\n",
        "import glob\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import math\n",
        "import os\n",
        "from keras.layers import *\n",
        "from keras.models import *\n",
        "from keras.optimizers import *\n",
        "import numpy as np\n",
        "\n",
        "MANIFEST_DIR = \"/content/train.csv\"\n",
        "Batch_size = 20\n",
        "Long = 792\n",
        "Lens = 640\n",
        "#把标签转成oneHot\n",
        "def convert2oneHot(index,Lens):\n",
        "    hot = np.zeros((Lens,))\n",
        "    hot[int(index)] = 1\n",
        "    return(hot)\n",
        "\n",
        "def xs_gen(path=MANIFEST_DIR,batch_size = Batch_size,train=True,Lens=Lens):\n",
        "\n",
        "    img_list = pd.read_csv(path)\n",
        "    if train:\n",
        "        img_list = np.array(img_list)[:Lens]\n",
        "        print(\"Found %s train items.\"%len(img_list))\n",
        "        print(\"list 1 is\",img_list[0,-1])\n",
        "        steps = math.ceil(len(img_list) / batch_size)    # 确定每轮有多少个batch\n",
        "    else:\n",
        "        img_list = np.array(img_list)[Lens:]\n",
        "        print(\"Found %s test items.\"%len(img_list))\n",
        "        print(\"list 1 is\",img_list[0,-1])\n",
        "        steps = math.ceil(len(img_list) / batch_size)    # 确定每轮有多少个batch\n",
        "    while True:\n",
        "        for i in range(steps):\n",
        "\n",
        "            batch_list = img_list[i * batch_size : i * batch_size + batch_size]\n",
        "            np.random.shuffle(batch_list)\n",
        "            batch_x = np.array([file for file in batch_list[:,1:-1]])\n",
        "            batch_y = np.array([convert2oneHot(label,10) for label in batch_list[:,-1]])\n",
        "\n",
        "            yield batch_x, batch_y\n",
        "\n",
        "TEST_MANIFEST_DIR = \"/content/test_data.csv\"\n",
        "\n",
        "def ts_gen(path=TEST_MANIFEST_DIR,batch_size = Batch_size):\n",
        "\n",
        "    img_list = pd.read_csv(path)\n",
        "\n",
        "    img_list = np.array(img_list)[:Lens]\n",
        "    print(\"Found %s train items.\"%len(img_list))\n",
        "    print(\"list 1 is\",img_list[0,-1])\n",
        "    steps = math.ceil(len(img_list) / batch_size)    # 确定每轮有多少个batch\n",
        "    while True:\n",
        "        for i in range(steps):\n",
        "\n",
        "            batch_list = img_list[i * batch_size : i * batch_size + batch_size]\n",
        "            #np.random.shuffle(batch_list)\n",
        "            batch_x = np.array([file for file in batch_list[:,1:]])\n",
        "            #batch_y = np.array([convert2oneHot(label,10) for label in batch_list[:,-1]])\n",
        "\n",
        "            yield batch_x\n",
        "\n",
        "\n",
        "\n",
        "TIME_PERIODS = 6000\n",
        "def build_model(input_shape=(TIME_PERIODS,),num_classes=10):\n",
        "    model = Sequential()\n",
        "    model.add(Reshape((TIME_PERIODS, 1), input_shape=input_shape))\n",
        "    model.add(Conv1D(16, 8,strides=2, activation='relu',input_shape=(TIME_PERIODS,1)))\n",
        "\n",
        "    model.add(Conv1D(16, 8,strides=2, activation='relu',padding=\"same\"))\n",
        "    model.add(MaxPooling1D(2))\n",
        "\n",
        "    model.add(Conv1D(64, 4,strides=2, activation='relu',padding=\"same\"))\n",
        "    model.add(Conv1D(64, 4,strides=2, activation='relu',padding=\"same\"))\n",
        "    model.add(MaxPooling1D(2))\n",
        "    model.add(Conv1D(256, 4,strides=2, activation='relu',padding=\"same\"))\n",
        "    model.add(Conv1D(256, 4,strides=2, activation='relu',padding=\"same\"))\n",
        "    model.add(MaxPooling1D(2))\n",
        "    model.add(Conv1D(512, 2,strides=1, activation='relu',padding=\"same\"))\n",
        "    model.add(Conv1D(512, 2,strides=1, activation='relu',padding=\"same\"))\n",
        "    model.add(MaxPooling1D(2))\n",
        "    \"\"\"model.add(Flatten())\n",
        "    model.add(Dropout(0.3))\n",
        "    model.add(Dense(256, activation='relu'))\"\"\"\n",
        "    model.add(GlobalAveragePooling1D())\n",
        "    model.add(Dropout(0.3))\n",
        "    model.add(Dense(num_classes, activation='softmax'))\n",
        "    return(model)\n",
        "\n",
        "Train = True\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    if Train == True:\n",
        "        train_iter = xs_gen()\n",
        "        val_iter = xs_gen(train=False)\n",
        "\n",
        "        ckpt = keras.callbacks.ModelCheckpoint(\n",
        "            filepath='best_model.{epoch:02d}-{val_loss:.4f}.h5',\n",
        "            monitor='val_loss', save_best_only=True,verbose=1)\n",
        "\n",
        "        model = build_model()\n",
        "        opt = Adam(0.0002)\n",
        "        model.compile(loss='categorical_crossentropy',\n",
        "                    optimizer=opt, metrics=['accuracy'])\n",
        "        print(model.summary())\n",
        "\n",
        "        model.fit_generator(\n",
        "            generator=train_iter,\n",
        "            steps_per_epoch=Lens//Batch_size,\n",
        "            epochs=50,\n",
        "            initial_epoch=0,\n",
        "            validation_data = val_iter,\n",
        "            validation_steps = (Long - Lens)//Batch_size,\n",
        "            callbacks=[ckpt],\n",
        "            )\n",
        "        model.save(\"finishModel.h5\")\n",
        "    else:\n",
        "        test_iter = ts_gen()\n",
        "        model = load_model(\"best_model.49-0.00.h5\")\n",
        "        pres = model.predict_generator(generator=test_iter,steps=math.ceil(528/Batch_size),verbose=1)\n",
        "        print(pres.shape)\n",
        "        ohpres = np.argmax(pres,axis=1)\n",
        "        print(ohpres.shape)\n",
        "        #img_list = pd.read_csv(TEST_MANIFEST_DIR)\n",
        "        df = pd.DataFrame()\n",
        "        df[\"id\"] = np.arange(1,len(ohpres)+1)\n",
        "        df[\"label\"] = ohpres\n",
        "        df.to_csv(\"submmit.csv\",index=None)\n",
        "        test_iter = ts_gen()\n",
        "        for x in test_iter:\n",
        "            x1 = x[0]\n",
        "            break\n",
        "        plt.plot(x1)\n",
        "        plt.show()\n",
        "\n"
      ]
    }
  ]
}